/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PostStorageStorageService_H
#define PostStorageStorageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PostStorageStorageServiceIf {
 public:
  virtual ~PostStorageStorageServiceIf() {}
  virtual void StorePost(const int64_t req_id, const Post& post, const std::map<std::string, std::string> & carrier) = 0;
  virtual void ReadPost(Post& _return, const int64_t req_id, const int64_t post_id, const std::map<std::string, std::string> & carrier) = 0;
  virtual void ReadPosts(std::vector<Post> & _return, const int64_t req_id, const std::vector<int64_t> & post_ids, const std::map<std::string, std::string> & carrier) = 0;
};

class PostStorageStorageServiceIfFactory {
 public:
  typedef PostStorageStorageServiceIf Handler;

  virtual ~PostStorageStorageServiceIfFactory() {}

  virtual PostStorageStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PostStorageStorageServiceIf* /* handler */) = 0;
  };

class PostStorageStorageServiceIfSingletonFactory : virtual public PostStorageStorageServiceIfFactory {
 public:
  PostStorageStorageServiceIfSingletonFactory(const ::std::shared_ptr<PostStorageStorageServiceIf>& iface) : iface_(iface) {}
  virtual ~PostStorageStorageServiceIfSingletonFactory() {}

  virtual PostStorageStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(PostStorageStorageServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<PostStorageStorageServiceIf> iface_;
};

class PostStorageStorageServiceNull : virtual public PostStorageStorageServiceIf {
 public:
  virtual ~PostStorageStorageServiceNull() {}
  void StorePost(const int64_t /* req_id */, const Post& /* post */, const std::map<std::string, std::string> & /* carrier */) override {
    return;
  }
  void ReadPost(Post& /* _return */, const int64_t /* req_id */, const int64_t /* post_id */, const std::map<std::string, std::string> & /* carrier */) override {
    return;
  }
  void ReadPosts(std::vector<Post> & /* _return */, const int64_t /* req_id */, const std::vector<int64_t> & /* post_ids */, const std::map<std::string, std::string> & /* carrier */) override {
    return;
  }
};

typedef struct _PostStorageStorageService_StorePost_args__isset {
  _PostStorageStorageService_StorePost_args__isset() : req_id(false), post(false), carrier(false) {}
  bool req_id :1;
  bool post :1;
  bool carrier :1;
} _PostStorageStorageService_StorePost_args__isset;

class PostStorageStorageService_StorePost_args {
 public:

  PostStorageStorageService_StorePost_args(const PostStorageStorageService_StorePost_args&);
  PostStorageStorageService_StorePost_args& operator=(const PostStorageStorageService_StorePost_args&);
  PostStorageStorageService_StorePost_args() noexcept
                                           : req_id(0) {
  }

  virtual ~PostStorageStorageService_StorePost_args() noexcept;
  int64_t req_id;
  Post post;
  std::map<std::string, std::string>  carrier;

  _PostStorageStorageService_StorePost_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_post(const Post& val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const PostStorageStorageService_StorePost_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(post == rhs.post))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const PostStorageStorageService_StorePost_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostStorageStorageService_StorePost_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostStorageStorageService_StorePost_pargs {
 public:


  virtual ~PostStorageStorageService_StorePost_pargs() noexcept;
  const int64_t* req_id;
  const Post* post;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostStorageStorageService_StorePost_result__isset {
  _PostStorageStorageService_StorePost_result__isset() : se(false) {}
  bool se :1;
} _PostStorageStorageService_StorePost_result__isset;

class PostStorageStorageService_StorePost_result {
 public:

  PostStorageStorageService_StorePost_result(const PostStorageStorageService_StorePost_result&);
  PostStorageStorageService_StorePost_result& operator=(const PostStorageStorageService_StorePost_result&);
  PostStorageStorageService_StorePost_result() noexcept {
  }

  virtual ~PostStorageStorageService_StorePost_result() noexcept;
  ServiceException se;

  _PostStorageStorageService_StorePost_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const PostStorageStorageService_StorePost_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const PostStorageStorageService_StorePost_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostStorageStorageService_StorePost_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostStorageStorageService_StorePost_presult__isset {
  _PostStorageStorageService_StorePost_presult__isset() : se(false) {}
  bool se :1;
} _PostStorageStorageService_StorePost_presult__isset;

class PostStorageStorageService_StorePost_presult {
 public:


  virtual ~PostStorageStorageService_StorePost_presult() noexcept;
  ServiceException se;

  _PostStorageStorageService_StorePost_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PostStorageStorageService_ReadPost_args__isset {
  _PostStorageStorageService_ReadPost_args__isset() : req_id(false), post_id(false), carrier(false) {}
  bool req_id :1;
  bool post_id :1;
  bool carrier :1;
} _PostStorageStorageService_ReadPost_args__isset;

class PostStorageStorageService_ReadPost_args {
 public:

  PostStorageStorageService_ReadPost_args(const PostStorageStorageService_ReadPost_args&);
  PostStorageStorageService_ReadPost_args& operator=(const PostStorageStorageService_ReadPost_args&);
  PostStorageStorageService_ReadPost_args() noexcept
                                          : req_id(0),
                                            post_id(0) {
  }

  virtual ~PostStorageStorageService_ReadPost_args() noexcept;
  int64_t req_id;
  int64_t post_id;
  std::map<std::string, std::string>  carrier;

  _PostStorageStorageService_ReadPost_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_post_id(const int64_t val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const PostStorageStorageService_ReadPost_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(post_id == rhs.post_id))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const PostStorageStorageService_ReadPost_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostStorageStorageService_ReadPost_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostStorageStorageService_ReadPost_pargs {
 public:


  virtual ~PostStorageStorageService_ReadPost_pargs() noexcept;
  const int64_t* req_id;
  const int64_t* post_id;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostStorageStorageService_ReadPost_result__isset {
  _PostStorageStorageService_ReadPost_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PostStorageStorageService_ReadPost_result__isset;

class PostStorageStorageService_ReadPost_result {
 public:

  PostStorageStorageService_ReadPost_result(const PostStorageStorageService_ReadPost_result&);
  PostStorageStorageService_ReadPost_result& operator=(const PostStorageStorageService_ReadPost_result&);
  PostStorageStorageService_ReadPost_result() noexcept {
  }

  virtual ~PostStorageStorageService_ReadPost_result() noexcept;
  Post success;
  ServiceException se;

  _PostStorageStorageService_ReadPost_result__isset __isset;

  void __set_success(const Post& val);

  void __set_se(const ServiceException& val);

  bool operator == (const PostStorageStorageService_ReadPost_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const PostStorageStorageService_ReadPost_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostStorageStorageService_ReadPost_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostStorageStorageService_ReadPost_presult__isset {
  _PostStorageStorageService_ReadPost_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PostStorageStorageService_ReadPost_presult__isset;

class PostStorageStorageService_ReadPost_presult {
 public:


  virtual ~PostStorageStorageService_ReadPost_presult() noexcept;
  Post* success;
  ServiceException se;

  _PostStorageStorageService_ReadPost_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PostStorageStorageService_ReadPosts_args__isset {
  _PostStorageStorageService_ReadPosts_args__isset() : req_id(false), post_ids(false), carrier(false) {}
  bool req_id :1;
  bool post_ids :1;
  bool carrier :1;
} _PostStorageStorageService_ReadPosts_args__isset;

class PostStorageStorageService_ReadPosts_args {
 public:

  PostStorageStorageService_ReadPosts_args(const PostStorageStorageService_ReadPosts_args&);
  PostStorageStorageService_ReadPosts_args& operator=(const PostStorageStorageService_ReadPosts_args&);
  PostStorageStorageService_ReadPosts_args() noexcept
                                           : req_id(0) {
  }

  virtual ~PostStorageStorageService_ReadPosts_args() noexcept;
  int64_t req_id;
  std::vector<int64_t>  post_ids;
  std::map<std::string, std::string>  carrier;

  _PostStorageStorageService_ReadPosts_args__isset __isset;

  void __set_req_id(const int64_t val);

  void __set_post_ids(const std::vector<int64_t> & val);

  void __set_carrier(const std::map<std::string, std::string> & val);

  bool operator == (const PostStorageStorageService_ReadPosts_args & rhs) const
  {
    if (!(req_id == rhs.req_id))
      return false;
    if (!(post_ids == rhs.post_ids))
      return false;
    if (!(carrier == rhs.carrier))
      return false;
    return true;
  }
  bool operator != (const PostStorageStorageService_ReadPosts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostStorageStorageService_ReadPosts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PostStorageStorageService_ReadPosts_pargs {
 public:


  virtual ~PostStorageStorageService_ReadPosts_pargs() noexcept;
  const int64_t* req_id;
  const std::vector<int64_t> * post_ids;
  const std::map<std::string, std::string> * carrier;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostStorageStorageService_ReadPosts_result__isset {
  _PostStorageStorageService_ReadPosts_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PostStorageStorageService_ReadPosts_result__isset;

class PostStorageStorageService_ReadPosts_result {
 public:

  PostStorageStorageService_ReadPosts_result(const PostStorageStorageService_ReadPosts_result&);
  PostStorageStorageService_ReadPosts_result& operator=(const PostStorageStorageService_ReadPosts_result&);
  PostStorageStorageService_ReadPosts_result() noexcept {
  }

  virtual ~PostStorageStorageService_ReadPosts_result() noexcept;
  std::vector<Post>  success;
  ServiceException se;

  _PostStorageStorageService_ReadPosts_result__isset __isset;

  void __set_success(const std::vector<Post> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const PostStorageStorageService_ReadPosts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const PostStorageStorageService_ReadPosts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PostStorageStorageService_ReadPosts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PostStorageStorageService_ReadPosts_presult__isset {
  _PostStorageStorageService_ReadPosts_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _PostStorageStorageService_ReadPosts_presult__isset;

class PostStorageStorageService_ReadPosts_presult {
 public:


  virtual ~PostStorageStorageService_ReadPosts_presult() noexcept;
  std::vector<Post> * success;
  ServiceException se;

  _PostStorageStorageService_ReadPosts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PostStorageStorageServiceClient : virtual public PostStorageStorageServiceIf {
 public:
  PostStorageStorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PostStorageStorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void StorePost(const int64_t req_id, const Post& post, const std::map<std::string, std::string> & carrier) override;
  void send_StorePost(const int64_t req_id, const Post& post, const std::map<std::string, std::string> & carrier);
  void recv_StorePost();
  void ReadPost(Post& _return, const int64_t req_id, const int64_t post_id, const std::map<std::string, std::string> & carrier) override;
  void send_ReadPost(const int64_t req_id, const int64_t post_id, const std::map<std::string, std::string> & carrier);
  void recv_ReadPost(Post& _return);
  void ReadPosts(std::vector<Post> & _return, const int64_t req_id, const std::vector<int64_t> & post_ids, const std::map<std::string, std::string> & carrier) override;
  void send_ReadPosts(const int64_t req_id, const std::vector<int64_t> & post_ids, const std::map<std::string, std::string> & carrier);
  void recv_ReadPosts(std::vector<Post> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PostStorageStorageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<PostStorageStorageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (PostStorageStorageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_StorePost(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadPost(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadPosts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PostStorageStorageServiceProcessor(::std::shared_ptr<PostStorageStorageServiceIf> iface) :
    iface_(iface) {
    processMap_["StorePost"] = &PostStorageStorageServiceProcessor::process_StorePost;
    processMap_["ReadPost"] = &PostStorageStorageServiceProcessor::process_ReadPost;
    processMap_["ReadPosts"] = &PostStorageStorageServiceProcessor::process_ReadPosts;
  }

  virtual ~PostStorageStorageServiceProcessor() {}
};

class PostStorageStorageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PostStorageStorageServiceProcessorFactory(const ::std::shared_ptr< PostStorageStorageServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< PostStorageStorageServiceIfFactory > handlerFactory_;
};

class PostStorageStorageServiceMultiface : virtual public PostStorageStorageServiceIf {
 public:
  PostStorageStorageServiceMultiface(std::vector<std::shared_ptr<PostStorageStorageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PostStorageStorageServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<PostStorageStorageServiceIf> > ifaces_;
  PostStorageStorageServiceMultiface() {}
  void add(::std::shared_ptr<PostStorageStorageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void StorePost(const int64_t req_id, const Post& post, const std::map<std::string, std::string> & carrier) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->StorePost(req_id, post, carrier);
    }
    ifaces_[i]->StorePost(req_id, post, carrier);
  }

  void ReadPost(Post& _return, const int64_t req_id, const int64_t post_id, const std::map<std::string, std::string> & carrier) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadPost(_return, req_id, post_id, carrier);
    }
    ifaces_[i]->ReadPost(_return, req_id, post_id, carrier);
    return;
  }

  void ReadPosts(std::vector<Post> & _return, const int64_t req_id, const std::vector<int64_t> & post_ids, const std::map<std::string, std::string> & carrier) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadPosts(_return, req_id, post_ids, carrier);
    }
    ifaces_[i]->ReadPosts(_return, req_id, post_ids, carrier);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PostStorageStorageServiceConcurrentClient : virtual public PostStorageStorageServiceIf {
 public:
  PostStorageStorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  PostStorageStorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void StorePost(const int64_t req_id, const Post& post, const std::map<std::string, std::string> & carrier) override;
  int32_t send_StorePost(const int64_t req_id, const Post& post, const std::map<std::string, std::string> & carrier);
  void recv_StorePost(const int32_t seqid);
  void ReadPost(Post& _return, const int64_t req_id, const int64_t post_id, const std::map<std::string, std::string> & carrier) override;
  int32_t send_ReadPost(const int64_t req_id, const int64_t post_id, const std::map<std::string, std::string> & carrier);
  void recv_ReadPost(Post& _return, const int32_t seqid);
  void ReadPosts(std::vector<Post> & _return, const int64_t req_id, const std::vector<int64_t> & post_ids, const std::map<std::string, std::string> & carrier) override;
  int32_t send_ReadPosts(const int64_t req_id, const std::vector<int64_t> & post_ids, const std::map<std::string, std::string> & carrier);
  void recv_ReadPosts(std::vector<Post> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
