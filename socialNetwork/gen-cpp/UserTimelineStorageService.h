/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserTimelineStorageService_H
#define UserTimelineStorageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UserTimelineStorageServiceIf {
 public:
  virtual ~UserTimelineStorageServiceIf() {}
  virtual void UpdateUserTimeline(const int64_t user_id, const int64_t post_id, const int64_t timestamp) = 0;
  virtual void GetUserTimeline(std::vector<int64_t> & _return, const int64_t user_id, const int32_t start, const int32_t stop) = 0;
};

class UserTimelineStorageServiceIfFactory {
 public:
  typedef UserTimelineStorageServiceIf Handler;

  virtual ~UserTimelineStorageServiceIfFactory() {}

  virtual UserTimelineStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserTimelineStorageServiceIf* /* handler */) = 0;
  };

class UserTimelineStorageServiceIfSingletonFactory : virtual public UserTimelineStorageServiceIfFactory {
 public:
  UserTimelineStorageServiceIfSingletonFactory(const ::std::shared_ptr<UserTimelineStorageServiceIf>& iface) : iface_(iface) {}
  virtual ~UserTimelineStorageServiceIfSingletonFactory() {}

  virtual UserTimelineStorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(UserTimelineStorageServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<UserTimelineStorageServiceIf> iface_;
};

class UserTimelineStorageServiceNull : virtual public UserTimelineStorageServiceIf {
 public:
  virtual ~UserTimelineStorageServiceNull() {}
  void UpdateUserTimeline(const int64_t /* user_id */, const int64_t /* post_id */, const int64_t /* timestamp */) override {
    return;
  }
  void GetUserTimeline(std::vector<int64_t> & /* _return */, const int64_t /* user_id */, const int32_t /* start */, const int32_t /* stop */) override {
    return;
  }
};

typedef struct _UserTimelineStorageService_UpdateUserTimeline_args__isset {
  _UserTimelineStorageService_UpdateUserTimeline_args__isset() : user_id(false), post_id(false), timestamp(false) {}
  bool user_id :1;
  bool post_id :1;
  bool timestamp :1;
} _UserTimelineStorageService_UpdateUserTimeline_args__isset;

class UserTimelineStorageService_UpdateUserTimeline_args {
 public:

  UserTimelineStorageService_UpdateUserTimeline_args(const UserTimelineStorageService_UpdateUserTimeline_args&) noexcept;
  UserTimelineStorageService_UpdateUserTimeline_args& operator=(const UserTimelineStorageService_UpdateUserTimeline_args&) noexcept;
  UserTimelineStorageService_UpdateUserTimeline_args() noexcept
                                                     : user_id(0),
                                                       post_id(0),
                                                       timestamp(0) {
  }

  virtual ~UserTimelineStorageService_UpdateUserTimeline_args() noexcept;
  int64_t user_id;
  int64_t post_id;
  int64_t timestamp;

  _UserTimelineStorageService_UpdateUserTimeline_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_post_id(const int64_t val);

  void __set_timestamp(const int64_t val);

  bool operator == (const UserTimelineStorageService_UpdateUserTimeline_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(post_id == rhs.post_id))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    return true;
  }
  bool operator != (const UserTimelineStorageService_UpdateUserTimeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTimelineStorageService_UpdateUserTimeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserTimelineStorageService_UpdateUserTimeline_pargs {
 public:


  virtual ~UserTimelineStorageService_UpdateUserTimeline_pargs() noexcept;
  const int64_t* user_id;
  const int64_t* post_id;
  const int64_t* timestamp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserTimelineStorageService_UpdateUserTimeline_result__isset {
  _UserTimelineStorageService_UpdateUserTimeline_result__isset() : se(false) {}
  bool se :1;
} _UserTimelineStorageService_UpdateUserTimeline_result__isset;

class UserTimelineStorageService_UpdateUserTimeline_result {
 public:

  UserTimelineStorageService_UpdateUserTimeline_result(const UserTimelineStorageService_UpdateUserTimeline_result&);
  UserTimelineStorageService_UpdateUserTimeline_result& operator=(const UserTimelineStorageService_UpdateUserTimeline_result&);
  UserTimelineStorageService_UpdateUserTimeline_result() noexcept {
  }

  virtual ~UserTimelineStorageService_UpdateUserTimeline_result() noexcept;
  ServiceException se;

  _UserTimelineStorageService_UpdateUserTimeline_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const UserTimelineStorageService_UpdateUserTimeline_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserTimelineStorageService_UpdateUserTimeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTimelineStorageService_UpdateUserTimeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserTimelineStorageService_UpdateUserTimeline_presult__isset {
  _UserTimelineStorageService_UpdateUserTimeline_presult__isset() : se(false) {}
  bool se :1;
} _UserTimelineStorageService_UpdateUserTimeline_presult__isset;

class UserTimelineStorageService_UpdateUserTimeline_presult {
 public:


  virtual ~UserTimelineStorageService_UpdateUserTimeline_presult() noexcept;
  ServiceException se;

  _UserTimelineStorageService_UpdateUserTimeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _UserTimelineStorageService_GetUserTimeline_args__isset {
  _UserTimelineStorageService_GetUserTimeline_args__isset() : user_id(false), start(false), stop(false) {}
  bool user_id :1;
  bool start :1;
  bool stop :1;
} _UserTimelineStorageService_GetUserTimeline_args__isset;

class UserTimelineStorageService_GetUserTimeline_args {
 public:

  UserTimelineStorageService_GetUserTimeline_args(const UserTimelineStorageService_GetUserTimeline_args&) noexcept;
  UserTimelineStorageService_GetUserTimeline_args& operator=(const UserTimelineStorageService_GetUserTimeline_args&) noexcept;
  UserTimelineStorageService_GetUserTimeline_args() noexcept
                                                  : user_id(0),
                                                    start(0),
                                                    stop(0) {
  }

  virtual ~UserTimelineStorageService_GetUserTimeline_args() noexcept;
  int64_t user_id;
  int32_t start;
  int32_t stop;

  _UserTimelineStorageService_GetUserTimeline_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_start(const int32_t val);

  void __set_stop(const int32_t val);

  bool operator == (const UserTimelineStorageService_GetUserTimeline_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    return true;
  }
  bool operator != (const UserTimelineStorageService_GetUserTimeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTimelineStorageService_GetUserTimeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserTimelineStorageService_GetUserTimeline_pargs {
 public:


  virtual ~UserTimelineStorageService_GetUserTimeline_pargs() noexcept;
  const int64_t* user_id;
  const int32_t* start;
  const int32_t* stop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserTimelineStorageService_GetUserTimeline_result__isset {
  _UserTimelineStorageService_GetUserTimeline_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserTimelineStorageService_GetUserTimeline_result__isset;

class UserTimelineStorageService_GetUserTimeline_result {
 public:

  UserTimelineStorageService_GetUserTimeline_result(const UserTimelineStorageService_GetUserTimeline_result&);
  UserTimelineStorageService_GetUserTimeline_result& operator=(const UserTimelineStorageService_GetUserTimeline_result&);
  UserTimelineStorageService_GetUserTimeline_result() noexcept {
  }

  virtual ~UserTimelineStorageService_GetUserTimeline_result() noexcept;
  std::vector<int64_t>  success;
  ServiceException se;

  _UserTimelineStorageService_GetUserTimeline_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const UserTimelineStorageService_GetUserTimeline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const UserTimelineStorageService_GetUserTimeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserTimelineStorageService_GetUserTimeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserTimelineStorageService_GetUserTimeline_presult__isset {
  _UserTimelineStorageService_GetUserTimeline_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _UserTimelineStorageService_GetUserTimeline_presult__isset;

class UserTimelineStorageService_GetUserTimeline_presult {
 public:


  virtual ~UserTimelineStorageService_GetUserTimeline_presult() noexcept;
  std::vector<int64_t> * success;
  ServiceException se;

  _UserTimelineStorageService_GetUserTimeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserTimelineStorageServiceClient : virtual public UserTimelineStorageServiceIf {
 public:
  UserTimelineStorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserTimelineStorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UpdateUserTimeline(const int64_t user_id, const int64_t post_id, const int64_t timestamp) override;
  void send_UpdateUserTimeline(const int64_t user_id, const int64_t post_id, const int64_t timestamp);
  void recv_UpdateUserTimeline();
  void GetUserTimeline(std::vector<int64_t> & _return, const int64_t user_id, const int32_t start, const int32_t stop) override;
  void send_GetUserTimeline(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_GetUserTimeline(std::vector<int64_t> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserTimelineStorageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<UserTimelineStorageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (UserTimelineStorageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UpdateUserTimeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetUserTimeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserTimelineStorageServiceProcessor(::std::shared_ptr<UserTimelineStorageServiceIf> iface) :
    iface_(iface) {
    processMap_["UpdateUserTimeline"] = &UserTimelineStorageServiceProcessor::process_UpdateUserTimeline;
    processMap_["GetUserTimeline"] = &UserTimelineStorageServiceProcessor::process_GetUserTimeline;
  }

  virtual ~UserTimelineStorageServiceProcessor() {}
};

class UserTimelineStorageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserTimelineStorageServiceProcessorFactory(const ::std::shared_ptr< UserTimelineStorageServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< UserTimelineStorageServiceIfFactory > handlerFactory_;
};

class UserTimelineStorageServiceMultiface : virtual public UserTimelineStorageServiceIf {
 public:
  UserTimelineStorageServiceMultiface(std::vector<std::shared_ptr<UserTimelineStorageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserTimelineStorageServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<UserTimelineStorageServiceIf> > ifaces_;
  UserTimelineStorageServiceMultiface() {}
  void add(::std::shared_ptr<UserTimelineStorageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void UpdateUserTimeline(const int64_t user_id, const int64_t post_id, const int64_t timestamp) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateUserTimeline(user_id, post_id, timestamp);
    }
    ifaces_[i]->UpdateUserTimeline(user_id, post_id, timestamp);
  }

  void GetUserTimeline(std::vector<int64_t> & _return, const int64_t user_id, const int32_t start, const int32_t stop) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetUserTimeline(_return, user_id, start, stop);
    }
    ifaces_[i]->GetUserTimeline(_return, user_id, start, stop);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UserTimelineStorageServiceConcurrentClient : virtual public UserTimelineStorageServiceIf {
 public:
  UserTimelineStorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  UserTimelineStorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void UpdateUserTimeline(const int64_t user_id, const int64_t post_id, const int64_t timestamp) override;
  int32_t send_UpdateUserTimeline(const int64_t user_id, const int64_t post_id, const int64_t timestamp);
  void recv_UpdateUserTimeline(const int32_t seqid);
  void GetUserTimeline(std::vector<int64_t> & _return, const int64_t user_id, const int32_t start, const int32_t stop) override;
  int32_t send_GetUserTimeline(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_GetUserTimeline(std::vector<int64_t> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
