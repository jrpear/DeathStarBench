--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'social_network_ttypes'

SocialGraphStorageServiceClient = __TObject.new(__TClient, {
  __type = 'SocialGraphStorageServiceClient'
})

function SocialGraphStorageServiceClient:ReadFollowers(user_id)
  self:send_ReadFollowers(user_id)
  return self:recv_ReadFollowers(user_id)
end

function SocialGraphStorageServiceClient:send_ReadFollowers(user_id)
  self.oprot:writeMessageBegin('ReadFollowers', TMessageType.CALL, self._seqid)
  local args = ReadFollowers_args:new{}
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphStorageServiceClient:recv_ReadFollowers(user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadFollowers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SocialGraphStorageServiceClient:ReadFollowees(user_id)
  self:send_ReadFollowees(user_id)
  return self:recv_ReadFollowees(user_id)
end

function SocialGraphStorageServiceClient:send_ReadFollowees(user_id)
  self.oprot:writeMessageBegin('ReadFollowees', TMessageType.CALL, self._seqid)
  local args = ReadFollowees_args:new{}
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphStorageServiceClient:recv_ReadFollowees(user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadFollowees_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SocialGraphStorageServiceClient:AddFollower(followee_id, follower_id)
  self:send_AddFollower(followee_id, follower_id)
  self:recv_AddFollower(followee_id, follower_id)
end

function SocialGraphStorageServiceClient:send_AddFollower(followee_id, follower_id)
  self.oprot:writeMessageBegin('AddFollower', TMessageType.CALL, self._seqid)
  local args = AddFollower_args:new{}
  args.followee_id = followee_id
  args.follower_id = follower_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphStorageServiceClient:recv_AddFollower(followee_id, follower_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = AddFollower_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SocialGraphStorageServiceClient:AddFollowee(follower_id, followee_id)
  self:send_AddFollowee(follower_id, followee_id)
  self:recv_AddFollowee(follower_id, followee_id)
end

function SocialGraphStorageServiceClient:send_AddFollowee(follower_id, followee_id)
  self.oprot:writeMessageBegin('AddFollowee', TMessageType.CALL, self._seqid)
  local args = AddFollowee_args:new{}
  args.follower_id = follower_id
  args.followee_id = followee_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphStorageServiceClient:recv_AddFollowee(follower_id, followee_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = AddFollowee_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SocialGraphStorageServiceClient:RemoveFollower(followee_id, follower_id)
  self:send_RemoveFollower(followee_id, follower_id)
  self:recv_RemoveFollower(followee_id, follower_id)
end

function SocialGraphStorageServiceClient:send_RemoveFollower(followee_id, follower_id)
  self.oprot:writeMessageBegin('RemoveFollower', TMessageType.CALL, self._seqid)
  local args = RemoveFollower_args:new{}
  args.followee_id = followee_id
  args.follower_id = follower_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphStorageServiceClient:recv_RemoveFollower(followee_id, follower_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = RemoveFollower_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SocialGraphStorageServiceClient:RemoveFollowee(follower_id, followee_id)
  self:send_RemoveFollowee(follower_id, followee_id)
  self:recv_RemoveFollowee(follower_id, followee_id)
end

function SocialGraphStorageServiceClient:send_RemoveFollowee(follower_id, followee_id)
  self.oprot:writeMessageBegin('RemoveFollowee', TMessageType.CALL, self._seqid)
  local args = RemoveFollowee_args:new{}
  args.follower_id = follower_id
  args.followee_id = followee_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphStorageServiceClient:recv_RemoveFollowee(follower_id, followee_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = RemoveFollowee_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
SocialGraphStorageServiceIface = __TObject:new{
  __type = 'SocialGraphStorageServiceIface'
}


SocialGraphStorageServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'SocialGraphStorageServiceProcessor'
})

function SocialGraphStorageServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    if oprot ~= nil then
      iprot:skip(TType.STRUCT)
      iprot:readMessageEnd()
      x = TApplicationException:new{
        errorCode = TApplicationException.UNKNOWN_METHOD
      }
      oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x:write(oprot)
      oprot:writeMessageEnd()
      oprot.trans:flush()
    end
    return false, 'Unknown function '..name
  else
    return self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function SocialGraphStorageServiceProcessor:process_ReadFollowers(seqid, iprot, oprot, server_ctx)
  local args = ReadFollowers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadFollowers_result:new{}
  local status, res = pcall(self.handler.ReadFollowers, self.handler, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadFollowers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
  return status, res
end

function SocialGraphStorageServiceProcessor:process_ReadFollowees(seqid, iprot, oprot, server_ctx)
  local args = ReadFollowees_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadFollowees_result:new{}
  local status, res = pcall(self.handler.ReadFollowees, self.handler, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadFollowees', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
  return status, res
end

function SocialGraphStorageServiceProcessor:process_AddFollower(seqid, iprot, oprot, server_ctx)
  local args = AddFollower_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = AddFollower_result:new{}
  local status, res = pcall(self.handler.AddFollower, self.handler, args.followee_id, args.follower_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('AddFollower', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
  return status, res
end

function SocialGraphStorageServiceProcessor:process_AddFollowee(seqid, iprot, oprot, server_ctx)
  local args = AddFollowee_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = AddFollowee_result:new{}
  local status, res = pcall(self.handler.AddFollowee, self.handler, args.follower_id, args.followee_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('AddFollowee', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
  return status, res
end

function SocialGraphStorageServiceProcessor:process_RemoveFollower(seqid, iprot, oprot, server_ctx)
  local args = RemoveFollower_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = RemoveFollower_result:new{}
  local status, res = pcall(self.handler.RemoveFollower, self.handler, args.followee_id, args.follower_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('RemoveFollower', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
  return status, res
end

function SocialGraphStorageServiceProcessor:process_RemoveFollowee(seqid, iprot, oprot, server_ctx)
  local args = RemoveFollowee_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = RemoveFollowee_result:new{}
  local status, res = pcall(self.handler.RemoveFollowee, self.handler, args.follower_id, args.followee_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('RemoveFollowee', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
  return status, res
end

-- HELPER FUNCTIONS AND STRUCTURES

ReadFollowers_args = __TObject:new{
  user_id
}

function ReadFollowers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadFollowers_args:write(oprot)
  oprot:writeStructBegin('ReadFollowers_args')
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 1)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadFollowers_result = __TObject:new{
  success
}

function ReadFollowers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype271, _size268 = iprot:readListBegin()
        for _i=1,_size268 do
          local _elem272 = iprot:readI64()
          table.insert(self.success, _elem272)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadFollowers_result:write(oprot)
  oprot:writeStructBegin('ReadFollowers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.I64, #self.success)
    for _,iter273 in ipairs(self.success) do
      oprot:writeI64(iter273)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadFollowees_args = __TObject:new{
  user_id
}

function ReadFollowees_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadFollowees_args:write(oprot)
  oprot:writeStructBegin('ReadFollowees_args')
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 1)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadFollowees_result = __TObject:new{
  success
}

function ReadFollowees_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype277, _size274 = iprot:readListBegin()
        for _i=1,_size274 do
          local _elem278 = iprot:readI64()
          table.insert(self.success, _elem278)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadFollowees_result:write(oprot)
  oprot:writeStructBegin('ReadFollowees_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.I64, #self.success)
    for _,iter279 in ipairs(self.success) do
      oprot:writeI64(iter279)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AddFollower_args = __TObject:new{
  followee_id,
  follower_id
}

function AddFollower_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.follower_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AddFollower_args:write(oprot)
  oprot:writeStructBegin('AddFollower_args')
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 1)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  if self.follower_id ~= nil then
    oprot:writeFieldBegin('follower_id', TType.I64, 2)
    oprot:writeI64(self.follower_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AddFollower_result = __TObject:new{

}

function AddFollower_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AddFollower_result:write(oprot)
  oprot:writeStructBegin('AddFollower_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AddFollowee_args = __TObject:new{
  follower_id,
  followee_id
}

function AddFollowee_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.follower_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AddFollowee_args:write(oprot)
  oprot:writeStructBegin('AddFollowee_args')
  if self.follower_id ~= nil then
    oprot:writeFieldBegin('follower_id', TType.I64, 1)
    oprot:writeI64(self.follower_id)
    oprot:writeFieldEnd()
  end
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 2)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

AddFollowee_result = __TObject:new{

}

function AddFollowee_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function AddFollowee_result:write(oprot)
  oprot:writeStructBegin('AddFollowee_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RemoveFollower_args = __TObject:new{
  followee_id,
  follower_id
}

function RemoveFollower_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.follower_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RemoveFollower_args:write(oprot)
  oprot:writeStructBegin('RemoveFollower_args')
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 1)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  if self.follower_id ~= nil then
    oprot:writeFieldBegin('follower_id', TType.I64, 2)
    oprot:writeI64(self.follower_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RemoveFollower_result = __TObject:new{

}

function RemoveFollower_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RemoveFollower_result:write(oprot)
  oprot:writeStructBegin('RemoveFollower_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RemoveFollowee_args = __TObject:new{
  follower_id,
  followee_id
}

function RemoveFollowee_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.follower_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RemoveFollowee_args:write(oprot)
  oprot:writeStructBegin('RemoveFollowee_args')
  if self.follower_id ~= nil then
    oprot:writeFieldBegin('follower_id', TType.I64, 1)
    oprot:writeI64(self.follower_id)
    oprot:writeFieldEnd()
  end
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 2)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RemoveFollowee_result = __TObject:new{

}

function RemoveFollowee_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RemoveFollowee_result:write(oprot)
  oprot:writeStructBegin('RemoveFollowee_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end